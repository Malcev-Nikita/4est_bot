from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from datetime import datetime

from .CLASS.DataBase import DataBase
from .keyboards import register_kb, role_kb, role_arr, task_kb, complete_kb
from .functions import delete_messages 
from .config import bot

async def start_handler(message: types.Message, state: FSMContext):

    await delete_messages(message)

    await state.reset_state()

    telegram_id = message.from_user.id

    DB = DataBase()
    res = DB.SQL(f"SELECT telegram_id FROM users WHERE telegram_id = {telegram_id}")

    if (len(res) == 0):
        await message.answer("<b>–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è</b> \n\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup = register_kb)

    else:
        await message.answer("<b>–¢—ã —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ.</b> \n\n–ú–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é –∫–æ–º–º–∞–Ω–¥. \nP.S. –û–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏–±–æ –≤–Ω–∏–∑—É —Å–ª–µ–≤–∞, –ª–∏–±–æ –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞.")


async def open_handler(message: types.Message, state: FSMContext):

    await delete_messages(message)

    await state.reset_state()

    now = datetime.now()
    formated_date = now.strftime('%Y-%m-%d')

    DB = DataBase()

    nickname = DB.SQL(f"SELECT `nickname`, `role` FROM `users` WHERE `telegram_id` = {message.from_user.id}")
    report = DB.SQL(f"SELECT `date`, `nickname`, `tasks`, `role` FROM `report` WHERE `date` = '{formated_date}' AND `role` = '{nickname[0][1]}' AND `tasks` LIKE '%–û—Ç–∫—Ä—ã–ª —Å–º–µ–Ω—É%'")
    
    if (nickname[0][1] in role_arr):

        if (len(report) != 0 and report[0][1] != nickname[0][0]): await message.answer("–°–µ–≥–æ–¥–Ω—è —É–∂–µ —Å–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
            
        else: await task_today_else(message, nickname)

    else: 
        await message.answer("–° —Ç–≤–æ–µ–π —Ä–æ–ª—å—é –Ω–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")


async def task_today_else(message: types.Message, nickname):

    now = datetime.now()
    formated_date = now.strftime('%Y-%m-%d')

    DB = DataBase()

    res = DB.SQL(f"SELECT `everyday_tasks`, `nickname`, `role` FROM `users` WHERE `telegram_id` = {message.from_user.id}")
    tasks_completely = DB.SQL(f"SELECT `tasks` FROM `report` WHERE `date` = '{formated_date}' AND `role` = '{res[0][2]}'")

    if (len(DB.SQL(f"SELECT * FROM `report` WHERE `date` = '{formated_date}' AND `nickname` = '{res[0][1]}'")) == 0):

        DB.SQL(f"INSERT INTO `report`(`date`, `nickname`, `role`, `tasks`) VALUES ('{formated_date}','{res[0][1]}', '{nickname[0][1]}','{nickname[0][0]} - –û—Ç–∫—Ä—ã–ª —Å–º–µ–Ω—É –≤ {now.hour}:{now.minute}')")

        admins = DB.SQL(f"SELECT `telegram_id` FROM `users` WHERE `role` = 'admin'")
        
        for admin in admins:
            await bot.send_message(admin[0], f"{nickname[0][0]} - üö™ –û—Ç–∫—Ä—ã–ª —Å–º–µ–Ω—É –≤ {now.hour}:{now.minute}")


    tasks = []
    tasks = res[0][0].split('; ')
    i = 0

    separator = '- ' * 22

    await message.answer(f"{separator}\n ‚úçÔ∏è <b>–ó–ê–î–ê–ß–ò –ù–ê –î–ï–ù–¨</b>\n{separator}")

    while i < len(tasks):

        done = False

        if ('–ó–∞–ª–µ–π —Å—Ç–æ—Ä–∏—Å, –ø–µ—Ä–µ–≤–æ–¥ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞, –∫ —Å–µ–±–µ –≤ —Å—Ç–æ—Ä–∏—Å, –≤ –∏–Ω—Å—Ç—É –∏ –≤–∫ (–ü–æ–ø—Ä–æ—Å–∏ –∞–¥–º–∏–Ω–∞ —Å–Ω—è—Ç—å –Ω–∞ —Ç–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω)' == tasks[i]):
            await message.answer(f"{separator}\n ‚úçÔ∏è <b>–ó–ê–î–ê–ß–ò –ù–ê –°–ï–ê–ù–° –¢–ê–¢–£–ò–†–û–í–ö–ò</b>\n{separator}")
    
        if ('–°—Ç–æ—Ä–∏—Å, –∞–∫—Ü–∏—è, —ç—Å–∫–∏–∑—ã –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ (–∏–Ω—Å—Ç–∞ –∏ –≤–∫)' == tasks[i]):
            await message.answer(f"{separator}\n ‚úçÔ∏è <b>–°–¢–û–†–ò–° –í –¢–ï–ß–ï–ù–ò–ò –î–ù–Ø</b>\n{separator}")

        if ('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É —á–∞–π –∏–ª–∏ –∫–æ—Ñ–µ' == tasks[i]):
            await message.answer(f"{separator}\n ‚úçÔ∏è <b>–†–ê–ë–û–¢–ê –° –ö–õ–ò–ï–ù–¢–û–ú</b>\n{separator}")

        
        for task_completely in tasks_completely:
            if (task_completely[0] == tasks[i]): 
                done = True
                break

        if (done): await message.answer(f'‚úÖ {tasks[i]}', reply_markup = complete_kb)

        else: await message.answer(f"‚ùóÔ∏è {tasks[i]}", reply_markup = task_kb)

        i += 1  


async def role_handler(message: types.Message, state: FSMContext):
    
    await delete_messages(message)

    await state.reset_state()

    await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å', reply_markup = role_kb)


async def close_handler(message: types.Message, state: FSMContext):
    
    await delete_messages(message)

    await state.reset_state()

    now = datetime.now()
    formated_date = now.strftime('%Y-%m-%d')

    DB = DataBase()
    nickname = DB.SQL(f"SELECT `nickname`, `role` FROM `users` WHERE `telegram_id` = {message.from_user.id}")

    if (nickname[0][1] in role_arr):
        DB.SQL(f"DELETE FROM `report` WHERE `date` = '{formated_date}' AND `nickname` = '{nickname[0][0]}' AND `tasks` LIKE '%–û—Ç–∫—Ä—ã–ª —Å–º–µ–Ω—É%'")

        admins = DB.SQL(f"SELECT `telegram_id` FROM `users` WHERE `role` = 'admin'")

        await message.answer('–¢—ã –∑–∞–∫—Ä—ã–ª —Å–º–µ–Ω—É')

        for admin in admins:
            await bot.send_message(admin[0], f"{nickname[0][0]} - üö™ –ó–∞–∫—Ä—ã–ª —Å–º–µ–Ω—É –≤ {now.hour}:{now.minute}")

    else: 
        await message.answer('–° —Ç–≤–æ–µ–π —Ä–æ–ª—å—é –Ω–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É')

def commands_handler(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=['start'], state = '*')
    dp.register_message_handler(open_handler, commands=['open'], state = '*')
    dp.register_message_handler(role_handler, commands=['role'], state = '*')
    dp.register_message_handler(close_handler, commands=['close'], state = '*')

## open - –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É
## close - –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É
## role - –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å